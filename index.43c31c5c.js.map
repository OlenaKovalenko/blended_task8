{"mappings":"AAAO,MAAMA,EAAO,CAChBC,KAAMC,SAASC,cAAc,cAC7BC,KAAMF,SAASC,cAAc,eCA1B,SAASE,EAAQC,GACpB,MAAMC,EAAQC,IACdD,EAAME,KAAKH,GACXI,aAAaC,QALD,WAKkBC,KAAKC,UAAUN,G,CAG1C,SAASC,I,IACPM,EAAP,OAAgD,QAAzCA,EAAAF,KAAKG,MAAML,aAAaM,QATjB,oBASkC,IAAzCF,IAA6C,E,CAG/C,SAASG,EAAWC,GACzB,MAEMC,EAFQX,IAEYY,QAAOC,GAAQA,EAAKH,KAAOA,IAErDR,aAAaC,QAjBC,WAiBgBC,KAAKC,UAAUM,G,CChBxC,IAkBIG,EAAS,CAACC,EAAO,KAC1BC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,CAACT,EAAIU,IAGrDV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,KAGP,IC9BE,SAASG,IACZ,MAAMzB,EAAO,CAACY,GAAGI,KAKjB,OAHA,IAAIU,SAASC,MAAMC,eAAeC,SAAQ,CAACC,EAAOC,KAC9C/B,EAAK+B,GAAQD,CAAK,IAEf9B,C,CCNJ,SAASgC,EAAWhC,GACzB,MAAMiC,EAAS,sCAAsCjC,EAAKY,oGAExCZ,EAAKkC,mCACNlC,EAAKmC,kCAEtBzC,EAAKI,KAAKsC,mBAAmB,YAAaH,E,CCc5CvC,EAAKC,KAAK0C,iBAAiB,UClBpB,SAAsBV,GAC3BA,EAAMW,iBAEN,MAAMtC,EAAOyB,IACb1B,EAAQC,GACRgC,EAAWhC,GACX2B,EAAMC,cAAcW,O,IDatB7C,EAAKI,KAAKuC,iBAAiB,SErBpB,SAAoBV,GAEzB,IAAKA,EAAMa,OAAOC,UAAUC,SAAS,UACnC,OAGF,MAAMC,EAAKhB,EAAMa,OAAOI,QAAQ,mBAC1BhC,EAAK+B,EAAGE,QAAQjC,GAEtB+B,EAAGG,SAEHnC,EAAWC,E,ICVN,WACL,MACMqB,EADQ/B,IACO6C,KAAIhC,GAChB,sCAAsCA,EAAKH,oGAElCG,EAAKmB,mCACNnB,EAAKoB,oCAGtBzC,EAAKI,KAAKkD,UAAYf,EAAOgB,KAAK,G,CHapC","sources":["src/js/refs.js","src/js/localStorageAPI.js","node_modules/nanoid/index.browser.js","src/js/createCart.js","src/js/renderCard.js","src/index.js","src/js/onFormSubmit.js","src/js/deleteCard.js","src/js/renderCarts.js"],"sourcesContent":["export const refs = {\n    form: document.querySelector('#task-form'),\n    list: document.querySelector('#task-list')\n};","const API_KEY = 'cartsKey';\n\nexport function addCart(cart) {\n    const carts = getCarts();\n    carts.push(cart);\n    localStorage.setItem(API_KEY, JSON.stringify(carts));\n}\n\nexport function getCarts() {\n  return JSON.parse(localStorage.getItem(API_KEY)) ?? [];\n}\n\nexport function removeCart(id) {\n  const carts = getCarts();\n\n  const cartsUpdate = carts.filter(item => item.id !== id);\n\n  localStorage.setItem(API_KEY, JSON.stringify(cartsUpdate));\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from \"nanoid\";\n\nexport function createCart() {\n    const cart = {id:nanoid()};\n\n    new FormData(event.currentTarget).forEach((value, name) => {\n        cart[name] = value;  \n    })\n    return cart;\n}","import { refs } from './refs';\n\nexport function renderCard(cart) {\n  const markup = `<li class=\"task-list-item\" data-id=${cart.id}>\n              <button class=\"task-list-item-btn js-del\">Удалить</button>\n              <h3>${cart.taskName}</h3>\n              <p>${cart.taskText}</p>\n            </li>`;\n  refs.list.insertAdjacentHTML('beforeend', markup);\n}\n","/**\n * Створи список справ.\n * На сторінці є два інпути які має вводиться назва і текст задачі.\n * Після натискання на кнопку \"Додати\" завдання додається до списку #task-list.\n *\n * Розмітка картки задачі\n * <li class=\"task-list-item\">\n *     <button class=\"task-list-item-btn\">Удалить</button>\n *     <h3>Заголовок</h3>\n *     <p>Текст</p>\n * </li>\n *\n * У кожної картки має бути кнопка \"Видалити\", щоб можна було\n * прибрати завдання зі списку.\n * Список із завданнями має бути доступним після перезавантаження сторінки.\n */\n\nimport { refs } from './js/refs';\nimport { renderCarts } from './js/renderCarts';\nimport { deleteCard } from './js/deleteCard';\nimport { onFormSubmit } from './js/onFormSubmit';\n\nrefs.form.addEventListener('submit', onFormSubmit);\nrefs.list.addEventListener(\"click\", deleteCard);\n\nrenderCarts();\n\n\n\n\n","import { addCart } from './localStorageAPI';\nimport { createCart } from './createCart';\nimport { renderCard } from './renderCard';\n\nexport function onFormSubmit(event) {\n  event.preventDefault();\n\n  const cart = createCart();\n  addCart(cart);\n  renderCard(cart);\n  event.currentTarget.reset();\n}","import { removeCart } from './localStorageAPI';\n\nexport function deleteCard(event) {\n\n  if (!event.target.classList.contains(\"js-del\")) {\n    return;\n  }\n\n  const li = event.target.closest(\".task-list-item\");\n  const id = li.dataset.id;\n  \n  li.remove();\n\n  removeCart(id);\n}","import { refs } from './refs';\nimport { getCarts } from './localStorageAPI';\n\nexport function renderCarts() {\n  const items = getCarts();\n  const markup = items.map(item => {\n    return `<li class=\"task-list-item\" data-id=${item.id}>\n              <button class=\"task-list-item-btn js-del\">Удалить</button>\n              <h3>${item.taskName}</h3>\n              <p>${item.taskText}</p>\n            </li>`;\n  });\n  refs.list.innerHTML = markup.join('');\n}\n"],"names":["$ee27a4d7c64fc8c4$export$21666b427502ea6d","form","document","querySelector","list","$f1e93b4660a948dd$export$2a94af17393dc4b4","cart","carts","$f1e93b4660a948dd$export$5d7a5f12642a4bf","push","localStorage","setItem","JSON","stringify","ref","parse","getItem","$f1e93b4660a948dd$export$d4c9a3e4597b9ab","id","cartsUpdate","filter","item","$cf399e049a9c4d34$export$ac4959f4f1338dfc","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","$cff743277cb9d8ec$export$1f96ef276f4967ea","FormData","event","currentTarget","forEach","value","name","$b62d4e3fbd34d2e3$export$e9aece8f6847aae6","markup","taskName","taskText","insertAdjacentHTML","addEventListener","preventDefault","reset","target","classList","contains","li","closest","dataset","remove","map","innerHTML","join"],"version":3,"file":"index.43c31c5c.js.map"}